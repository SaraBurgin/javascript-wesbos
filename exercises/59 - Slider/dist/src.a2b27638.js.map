{"version":3,"sources":["src/index.js"],"names":["Slider","slider","Element","Error","prev","current","next","slides","querySelector","prevButton","nextButton","startSlider","firstElementChild","previousElementSibling","lastElementChild","nextElementSibling","console","log","applyClasses","classList","add","move","direction","classesToRemove","remove","addEventListener","mySlider","document","dogSlider"],"mappings":"AAAA,SAASA,MAAT,CAAgBC,MAAhB,EAAwB;AAChB,MAAI,EAAEA,MAAM,YAAYC,OAApB,CAAJ,EAAkC;AAC1B,UAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACP,GAHe,CAIhB;;;AACA,MAAIC,IAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,IAAJ,CAPgB,CAQhB;;AACA,MAAMC,MAAM,GAAGN,MAAM,CAACO,aAAP,CAAqB,SAArB,CAAf;AACA,MAAMC,UAAU,GAAGR,MAAM,CAACO,aAAP,CAAqB,WAArB,CAAnB;AACA,MAAME,UAAU,GAAGT,MAAM,CAACO,aAAP,CAAqB,WAArB,CAAnB;;AAEA,WAASG,WAAT,GAAuB;AACfN,IAAAA,OAAO,GAAGJ,MAAM,CAACO,aAAP,CAAqB,UAArB,KAAoCD,MAAM,CAACK,iBAArD;AACAR,IAAAA,IAAI,GAAGC,OAAO,CAACQ,sBAAR,IAAkCN,MAAM,CAACO,gBAAhD;AACAR,IAAAA,IAAI,GAAGD,OAAO,CAACU,kBAAR,IAA8BR,MAAM,CAACK,iBAA5C;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEZ,MAAAA,OAAO,EAAPA,OAAF;AAAWD,MAAAA,IAAI,EAAJA,IAAX;AAAiBE,MAAAA,IAAI,EAAJA;AAAjB,KAAZ;AACP;;AACD,WAASY,YAAT,GAAwB;AAChBb,IAAAA,OAAO,CAACc,SAAR,CAAkBC,GAAlB,CAAsB,SAAtB;AACAhB,IAAAA,IAAI,CAACe,SAAL,CAAeC,GAAf,CAAmB,MAAnB;AACAd,IAAAA,IAAI,CAACa,SAAL,CAAeC,GAAf,CAAmB,MAAnB;AACP;;AAED,WAASC,IAAT,CAAcC,SAAd,EAAyB;AAAA;;AACjB;AACA,QAAMC,eAAe,GAAG,CAAC,MAAD,EAAS,SAAT,EAAoB,MAApB,CAAxB;;AACA,uBAAAnB,IAAI,CAACe,SAAL,EAAeK,MAAf,wBAAyBD,eAAzB;;AACA,0BAAAlB,OAAO,CAACc,SAAR,EAAkBK,MAAlB,2BAA4BD,eAA5B;;AACA,uBAAAjB,IAAI,CAACa,SAAL,EAAeK,MAAf,wBAAyBD,eAAzB,EALiB,CAMjB;;;AACA,QAAID,SAAS,KAAK,MAAlB,EAA0B;AAClB;AADkB,iBAEM,CAChB;AACAlB,MAAAA,IAAI,CAACS,sBAAL,IAA+BN,MAAM,CAACO,gBAFtB,EAGhBV,IAHgB,EAIhBC,OAJgB,CAFN;AAEjBD,MAAAA,IAFiB;AAEXC,MAAAA,OAFW;AAEFC,MAAAA,IAFE;AAQzB,KARD,MAQO;AAAA,kBACyB,CAChBD,OADgB,EAEhBC,IAFgB,EAGhB;AACAA,MAAAA,IAAI,CAACS,kBAAL,IAA2BR,MAAM,CAACK,iBAJlB,CADzB;AACER,MAAAA,IADF;AACQC,MAAAA,OADR;AACiBC,MAAAA,IADjB;AAON,KAtBgB,CAuBjB;;;AACAY,IAAAA,YAAY;AACnB,GAlDe,CAmDhB;;;AACAP,EAAAA,WAAW;AACXO,EAAAA,YAAY,GArDI,CAuDhB;;AACAT,EAAAA,UAAU,CAACgB,gBAAX,CAA4B,OAA5B,EAAqC;AAAA,WAAMJ,IAAI,CAAC,MAAD,CAAV;AAAA,GAArC;AACAX,EAAAA,UAAU,CAACe,gBAAX,CAA4B,OAA5B,EAAqCJ,IAArC;AACP;;AAED,IAAMK,QAAQ,GAAG1B,MAAM,CAAC2B,QAAQ,CAACnB,aAAT,CAAuB,SAAvB,CAAD,CAAvB;AACA,IAAMoB,SAAS,GAAG5B,MAAM,CAAC2B,QAAQ,CAACnB,aAAT,CAAuB,aAAvB,CAAD,CAAxB","file":"src.a2b27638.js","sourceRoot":"..","sourcesContent":["function Slider(slider) {\n        if (!(slider instanceof Element)) {\n                throw new Error('No slider passed in');\n        }\n        // Create some variables for working with the slider\n        let prev;\n        let current;\n        let next;\n        // Select elements needed for the slider\n        const slides = slider.querySelector('.slides');\n        const prevButton = slider.querySelector('.goToPrev');\n        const nextButton = slider.querySelector('.goToNext');\n\n        function startSlider() {\n                current = slider.querySelector('.current') || slides.firstElementChild;\n                prev = current.previousElementSibling || slides.lastElementChild;\n                next = current.nextElementSibling || slides.firstElementChild;\n                console.log({ current, prev, next });\n        }\n        function applyClasses() {\n                current.classList.add('current');\n                prev.classList.add('prev');\n                next.classList.add('next');\n        }\n\n        function move(direction) {\n                // Remove: previous, current and next classes\n                const classesToRemove = ['prev', 'current', 'next'];\n                prev.classList.remove(...classesToRemove);\n                current.classList.remove(...classesToRemove);\n                next.classList.remove(...classesToRemove);\n                // Add: classes to the previous('back') and next version of them\n                if (direction === 'back') {\n                        // 1° Make a new array of the new values, and destructure them over and into the prev, current and next variables\n                        [prev, current, next] = [\n                                // Get the prev slide, if there is none get the last slide from the entire slider for wrapping\n                                prev.previousElementSibling || slides.lastElementChild,\n                                prev,\n                                current,\n                        ];\n                } else {\n                        [prev, current, next] = [\n                                current,\n                                next,\n                                // Get the next slide, or if it's at the end, loop around and grab the first slide\n                                next.nextElementSibling || slides.firstElementChild,\n                        ];\n                }\n                // 2° re-run the applyClasses function\n                applyClasses();\n        }\n        // When this slider is created, run  the startSlider()\n        startSlider();\n        applyClasses();\n\n        // Event listeners\n        prevButton.addEventListener('click', () => move('back'));\n        nextButton.addEventListener('click', move);\n}\n\nconst mySlider = Slider(document.querySelector('.slider'));\nconst dogSlider = Slider(document.querySelector('.dog-slider'));\n"]}