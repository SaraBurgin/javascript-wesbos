console.log('it works!');
const video = document.querySelector('.webcam');
const canvas = document.querySelector('.video');
const ctx = canvas.getContext('2d');
const faceCanvas = document.querySelector('.face');
const faceCtx = faceCanvas.getContext('2d');
const faceDetector = new window.FaceDetector(); // Graphics - canvas world when a variable will remain constant throughout the application they write it down in capital letters

const options = {
  SIZE: 10,
  SCALE: 1.5
}; // Write a function that will populate(show) the users video
// 1Â° What we have done is create the function and make it async because sometimes stream takes a while to start so it awaits for the camera to start and then loads the function
// with navigator.mediaDevices.getUserMedia() we grab the feed off the users webcam, then we set the object to be the stream and we went ahead and played it with await video.play();

async function populateVideo() {
  const stream = await navigator.mediaDevices.getUserMedia({
    video: {
      width: 1280,
      height: 720
    }
  });
  video.srcObject = stream;
  await video.play(); // Also await here because sometimes playing also takes a second or two and that will wait for it to start playing
  // size the canvases to be the same size as the video

  canvas.width = video.videoWidth;
  canvas.height = video.videoHeight;
  faceCanvas.width = video.videoWidth;
  faceCanvas.height = video.videoHeight;
} // We want to detect faces that are in the shot


async function detect() {
  const faces = await faceDetector.detect(video); // Ask the browser when the next animation frame is, and tell it to run detect for us. This below is called recursion, this happens when a function calls itself inside of itself. It will run infinitely until there is an exit condition.

  faces.forEach(drawFace);
  faces.forEach(censor);
  requestAnimationFrame(detect);
}

function drawFace(face) {
  const {
    width,
    height,
    top,
    left
  } = face.boundingBox;
  ctx.clearRect(0, 0, canvas.width, canvas.videoHeight);
  ctx.strokeStyle = '#ffc600';
  ctx.lineWidth = 2;
  ctx.strokeRect(left, top, width, height);
}

function censor({
  boundingBox: face
}) {
  faceCtx.imageSmoothingEnabled = false;
  faceCtx.clearRect(0, 0, faceCanvas.width, faceCanvas.height); // draw the small face

  faceCtx.drawImage( // 5 source args - about how to pull data out of this video
  video, // where does the source come from?
  face.x, // where do we start the source pull from?
  face.y, face.width, // how wide and high does it need to go?
  face.height, // 4 draw args - about how we paint it into the square
  face.x, // where should we start drawing the x and y?
  face.y, options.SIZE, // how wide and high should I paint it to?
  options.SIZE); // draw the small face back on, but scale it up

  const width = face.width * options.SCALE;
  const height = face.height * options.SCALE;
  faceCtx.drawImage(faceCanvas, // source
  face.x, // where do we want to start it
  face.y, options.SIZE, options.SIZE, // Drawing args
  face.x - (width - face.width) / 2, face.y - (height - face.height) / 2, width, height);
}

populateVideo().then(detect);